{"type": "function", "name": "get_db", "code": "async def get_db() -> AsyncGenerator[AsyncSession, None]:\n    async with AsyncSessionLocal() as session:\n        yield session", "file_path": "backend/api/deps.py", "start_line": 10, "end_line": 12}
{"type": "class", "name": "AskRequest", "code": "class AskRequest(BaseModel):\n    question: str\n    project_id: int", "file_path": "backend/api/routes.py", "start_line": 9, "end_line": 11}
{"type": "class", "name": "AskResponse", "code": "class AskResponse(BaseModel):\n    answer: str", "file_path": "backend/api/routes.py", "start_line": 13, "end_line": 14}
{"type": "function", "name": "ask_user_question", "code": "def ask_user_question(\n    data: AskRequest,\n    user_id: int = Depends(get_current_user)\n) -> Any:\n    # TODO: Call LLM agent to generate GraphQL and execute it\n    return {\"answer\": f\"[MOCK] {user_id} asked: '{data.question}' for project {data.project_id}\"}", "file_path": "backend/api/routes.py", "start_line": 17, "end_line": 22}
{"type": "function", "name": "get_project_summary", "code": "def get_project_summary(project_id: int, user_id: int = Depends(get_current_user)):\n    # TODO: Generate summary for the given project\n    return {\n        \"project_id\": project_id,\n        \"summary\": \"[MOCK] This is a project summary generated by LLM.\"\n    }", "file_path": "backend/api/routes.py", "start_line": 26, "end_line": 31}
{"type": "class", "name": "User", "code": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    \n    projects = relationship(\"UserProject\", back_populates=\"user\")", "file_path": "backend/auth/models.py", "start_line": 7, "end_line": 14}
{"type": "class", "name": "Project", "code": "class Project(Base):\n    __tablename__ = \"projects\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    users = relationship(\"UserProject\", back_populates=\"project\")", "file_path": "backend/auth/models.py", "start_line": 16, "end_line": 23}
{"type": "class", "name": "UserProject", "code": "class UserProject(Base):\n    __tablename__ = \"user_projects\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    project_id = Column(Integer, ForeignKey(\"projects.id\"))\n\n    user = relationship(\"User\", back_populates=\"projects\")\n    project = relationship(\"Project\", back_populates=\"users\")", "file_path": "backend/auth/models.py", "start_line": 25, "end_line": 32}
{"type": "class", "name": "UserCreate", "code": "class UserCreate(BaseModel):\n    email: str\n    password: str", "file_path": "backend/auth/routes.py", "start_line": 11, "end_line": 13}
{"type": "class", "name": "Token", "code": "class Token(BaseModel):\n    access_token: str\n    token_type: str", "file_path": "backend/auth/routes.py", "start_line": 15, "end_line": 17}
{"type": "function", "name": "register", "code": "def register(user: UserCreate, db: Session = Depends(get_db)):\n    existing = db.query(User).filter(User.email == user.email).first()\n    if existing:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    hashed_pw = get_password_hash(user.password)\n    new_user = User(email=user.email, hashed_password=hashed_pw)\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n\n    access_token = create_access_token(data={\"sub\": new_user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}", "file_path": "backend/auth/routes.py", "start_line": 20, "end_line": 32}
{"type": "function", "name": "login", "code": "def login(form_data: UserCreate, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == form_data.email).first()\n    if not user or not verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Incorrect email or password\")\n\n    access_token = create_access_token(data={\"sub\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}", "file_path": "backend/auth/routes.py", "start_line": 35, "end_line": 41}
{"type": "function", "name": "verify_password", "code": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)", "file_path": "backend/auth/utils.py", "start_line": 14, "end_line": 15}
{"type": "function", "name": "get_password_hash", "code": "def get_password_hash(password):\n    return pwd_context.hash(password)", "file_path": "backend/auth/utils.py", "start_line": 17, "end_line": 18}
{"type": "function", "name": "create_access_token", "code": "def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.access_token_expire_minutes))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)", "file_path": "backend/auth/utils.py", "start_line": 20, "end_line": 24}
{"type": "function", "name": "get_current_user", "code": "def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])\n        user_id = payload.get(\"sub\")\n        if user_id is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n        return int(user_id)\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")", "file_path": "backend/auth/utils.py", "start_line": 26, "end_line": 34}
{"type": "class", "name": "Settings", "code": "class Settings(BaseSettings):\n    database_url: AnyUrl\n    secret_key: str\n    access_token_expire_minutes: int = 15\n    refresh_token_expire_minutes: int = 1440\n    mode: str = \"development\" # TODO: Change for prod\n    \n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n    )\n\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)", "file_path": "backend/core/config.py", "start_line": 4, "end_line": 17}
{"type": "function", "name": "__init__", "code": "def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)", "file_path": "backend/core/config.py", "start_line": 16, "end_line": 17}
{"type": "function", "name": "root", "code": "def root():\n    return {\"status\": \"ok\"}", "file_path": "backend/main.py", "start_line": 10, "end_line": 11}
