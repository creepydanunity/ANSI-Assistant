{"type": "function", "name": "get_db", "code": "async def get_db() -> AsyncGenerator[AsyncSession, None]:\n    async with AsyncSessionLocal() as session:\n        yield session", "file_path": "backend/api/deps.py", "start_line": 10, "end_line": 12, "description": "This Python code defines an asynchronous generator function `get_db` that asynchronously creates a database session using `AsyncSessionLocal` and yields it for use elsewhere in the code."}
{"type": "class", "name": "AskRequest", "code": "class AskRequest(BaseModel):\n    question: str\n    project_id: int", "file_path": "backend/api/routes.py", "start_line": 9, "end_line": 11, "description": "This Python code defines a class named `AskRequest` that inherits from `BaseModel`. The class has two attributes: `question` which is a string, and `project_id` which is an integer."}
{"type": "class", "name": "AskResponse", "code": "class AskResponse(BaseModel):\n    answer: str", "file_path": "backend/api/routes.py", "start_line": 13, "end_line": 14, "description": "This Python code defines a class named `AskResponse` that inherits from `BaseModel. It has a single attribute `answer` which is of type string."}
{"type": "function", "name": "ask_user_question", "code": "def ask_user_question(\n    data: AskRequest,\n    user_id: int = Depends(get_current_user)\n) -> Any:\n    # TODO: Call LLM agent to generate GraphQL and execute it\n    return {\"answer\": f\"[MOCK] {user_id} asked: '{data.question}' for project {data.project_id}\"}", "file_path": "backend/api/routes.py", "start_line": 17, "end_line": 22, "description": "This Python function, `ask_user_question`, takes in a user request and a user ID, then returns a mock answer in the form of a dictionary. The answer includes the user ID, the question asked, and the project ID from the user request."}
{"type": "function", "name": "get_project_summary", "code": "def get_project_summary(project_id: int, user_id: int = Depends(get_current_user)):\n    # TODO: Generate summary for the given project\n    return {\n        \"project_id\": project_id,\n        \"summary\": \"[MOCK] This is a project summary generated by LLM.\"\n    }", "file_path": "backend/api/routes.py", "start_line": 26, "end_line": 31, "description": "The code defines a function `get_project_summary` that takes a project ID and a user ID as arguments, and returns a dictionary containing the project ID and a mock project summary. The user ID is obtained by calling the `get_current_user` function, which is not defined in the provided code."}
{"type": "class", "name": "User", "code": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    \n    projects = relationship(\"UserProject\", back_populates=\"user\")", "file_path": "backend/auth/models.py", "start_line": 7, "end_line": 14, "description": "This Python code defines a User class for a database model using SQLAlchemy ORM. The User class has fields for id, email, hashed_password, created_at, and a relationship to the UserProject class, which represents the projects associated with each user."}
{"type": "class", "name": "Project", "code": "class Project(Base):\n    __tablename__ = \"projects\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    users = relationship(\"UserProject\", back_populates=\"project\")", "file_path": "backend/auth/models.py", "start_line": 16, "end_line": 23, "description": "This Python code defines a class named \"Project\" that represents a table in a database. The table, named \"projects\", has five fields: id, name, description, created_at, and a relationship to another table \"UserProject\"."}
{"type": "class", "name": "UserProject", "code": "class UserProject(Base):\n    __tablename__ = \"user_projects\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    project_id = Column(Integer, ForeignKey(\"projects.id\"))\n\n    user = relationship(\"User\", back_populates=\"projects\")\n    project = relationship(\"Project\", back_populates=\"users\")", "file_path": "backend/auth/models.py", "start_line": 25, "end_line": 32, "description": "This Python code defines a SQLAlchemy ORM class named `UserProject` that maps to a database table named \"user_projects\". The table has three columns (id, user_id, project_id) and establishes relationships with \"User\" and \"Project\" tables, allowing for back-population of related data."}
{"type": "class", "name": "UserCreate", "code": "class UserCreate(BaseModel):\n    email: str\n    password: str", "file_path": "backend/auth/routes.py", "start_line": 11, "end_line": 13, "description": "This Python code defines a class named `UserCreate` that inherits from `BaseModel`. The class has two attributes: `email` and `password`, both of which are strings."}
{"type": "class", "name": "Token", "code": "class Token(BaseModel):\n    access_token: str\n    token_type: str", "file_path": "backend/auth/routes.py", "start_line": 15, "end_line": 17, "description": "This Python code defines a class named 'Token' that inherits from 'BaseModel'. The 'Token' class has two attributes: 'access_token' and 'token_type', both of which are strings."}
{"type": "function", "name": "register", "code": "def register(user: UserCreate, db: Session = Depends(get_db)):\n    existing = db.query(User).filter(User.email == user.email).first()\n    if existing:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    hashed_pw = get_password_hash(user.password)\n    new_user = User(email=user.email, hashed_password=hashed_pw)\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n\n    access_token = create_access_token(data={\"sub\": new_user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}", "file_path": "backend/auth/routes.py", "start_line": 20, "end_line": 32, "description": "This Python function registers a new user in a database. It first checks if the user's email is already registered, and if not, it hashes the user's password, adds the new user to the database, commits the changes, and returns an access token."}
{"type": "function", "name": "login", "code": "def login(form_data: UserCreate, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == form_data.email).first()\n    if not user or not verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Incorrect email or password\")\n\n    access_token = create_access_token(data={\"sub\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}", "file_path": "backend/auth/routes.py", "start_line": 35, "end_line": 41, "description": "This Python function checks if a user's login details (email and password) are valid, and if they are, it generates and returns an access token for the user. If the login details are not valid, it raises an HTTP exception with a 401 status code."}
{"type": "function", "name": "verify_password", "code": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)", "file_path": "backend/auth/utils.py", "start_line": 14, "end_line": 15, "description": "This Python function checks if a plain text password matches a hashed password by using the `verify` method of the `pwd_context` object."}
{"type": "function", "name": "get_password_hash", "code": "def get_password_hash(password):\n    return pwd_context.hash(password)", "file_path": "backend/auth/utils.py", "start_line": 17, "end_line": 18, "description": "This Python function takes a password as input and returns a hashed version of that password using the `pwd_context.hash` method. This is typically done for security reasons to protect the original password."}
{"type": "function", "name": "create_access_token", "code": "def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.access_token_expire_minutes))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)", "file_path": "backend/auth/utils.py", "start_line": 20, "end_line": 24, "description": "This Python function creates a JSON Web Token (JWT) with the provided data and an expiration time. If no expiration time is provided, it defaults to a value specified in the settings."}
{"type": "function", "name": "get_current_user", "code": "def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])\n        user_id = payload.get(\"sub\")\n        if user_id is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n        return int(user_id)\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")", "file_path": "backend/auth/utils.py", "start_line": 26, "end_line": 34, "description": "The code defines a function that decodes a JWT token to get the user ID. If the token is invalid or the user ID is not found in the token, it raises an HTTP exception with a 401 status code."}
{"type": "class", "name": "Settings", "code": "class Settings(BaseSettings):\n    database_url: AnyUrl\n    secret_key: str\n    access_token_expire_minutes: int = 15\n    refresh_token_expire_minutes: int = 1440\n    mode: str = \"development\" # TODO: Change for prod\n    \n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n    )\n\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)", "file_path": "backend/core/config.py", "start_line": 4, "end_line": 17, "description": "This Python code defines a class named `Settings` that inherits from `BaseSettings`. The class contains several attributes including `database_url`, `secret_key`, `access_token_expire_minutes`, `refresh_token_expire_minutes`, `mode`, and `model_config`. The `__init__` method is used to initialize these attributes."}
{"type": "function", "name": "__init__", "code": "def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)", "file_path": "backend/core/config.py", "start_line": 16, "end_line": 17, "description": "This Python code defines an initialization method for a class that inherits from a parent class, passing any keyword arguments received to the parent class's initialization method."}
{"type": "function", "name": "root", "code": "def root():\n    return {\"status\": \"ok\"}", "file_path": "backend/main.py", "start_line": 10, "end_line": 11, "description": "This Python code defines a function named `root` that, when called, returns a dictionary with a single key-value pair, where the key is \"status\" and the value is \"ok\"."}
