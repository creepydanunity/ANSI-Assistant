{"type": "catalog", "name": "__project_catalog__", "file_path": "__catalog__", "start_line": 0, "end_line": 0, "description": "This is a high-level summary of the project structure:\n\n- `backend/api/deps.py`:\n  - `get_db`: This Python code defines an asynchronous generator function `get_db` that asynchronously creates a database session using `AsyncSessionLocal` and yields it for use elsewhere in the code.\n\n- `backend/api/routes.py`:\n  - `AskRequest`: This Python code defines a class named `AskRequest` that inherits from `BaseModel`. The class has two attributes: `question` which is a string, and `project_id` which is an integer.\n  - `AskResponse`: This Python code defines a class named `AskResponse` that inherits from `BaseModel. It has a single attribute `answer` which is of type string.\n  - `ask_user_question`: This Python function, `ask_user_question`, takes in a user request and a user ID, then returns a mock answer in the form of a dictionary. The answer includes the user ID, the question asked, and the project ID from the user request.\n  - `get_project_summary`: The code defines a function `get_project_summary` that takes a project ID and a user ID as arguments, and returns a dictionary containing the project ID and a mock project summary. The user ID is obtained by calling the `get_current_user` function, which is not defined in the provided code.\n\n- `backend/auth/models.py`:\n  - `User`: This Python code defines a User class for a database model using SQLAlchemy ORM. The User class has fields for id, email, hashed_password, created_at, and a relationship to the UserProject class, which represents the projects associated with each user.\n  - `Project`: This Python code defines a class named \"Project\" that represents a table in a database. The table, named \"projects\", has five fields: id, name, description, created_at, and a relationship to another table \"UserProject\".\n  - `UserProject`: This Python code defines a SQLAlchemy ORM class named `UserProject` that maps to a database table named \"user_projects\". The table has three columns (id, user_id, project_id) and establishes relationships with \"User\" and \"Project\" tables, allowing for back-population of related data.\n\n- `backend/auth/routes.py`:\n  - `UserCreate`: This Python code defines a class named `UserCreate` that inherits from `BaseModel`. The class has two attributes: `email` and `password`, both of which are strings.\n  - `Token`: This Python code defines a class named 'Token' that inherits from 'BaseModel'. The 'Token' class has two attributes: 'access_token' and 'token_type', both of which are strings.\n  - `register`: This Python function registers a new user in a database. It first checks if the user's email is already registered, and if not, it hashes the user's password, adds the new user to the database, commits the changes, and returns an access token.\n  - `login`: This Python function checks if a user's login details (email and password) are valid, and if they are, it generates and returns an access token for the user. If the login details are not valid, it raises an HTTP exception with a 401 status code.\n\n- `backend/auth/utils.py`:\n  - `verify_password`: This Python function checks if a plain text password matches a hashed password by using the `verify` method of the `pwd_context` object.\n  - `get_password_hash`: This Python function takes a password as input and returns a hashed version of that password using the `pwd_context.hash` method. This is typically done for security reasons to protect the original password.\n  - `create_access_token`: This Python function creates a JSON Web Token (JWT) with the provided data and an expiration time. If no expiration time is provided, it defaults to a value specified in the settings.\n  - `get_current_user`: The code defines a function that decodes a JWT token to get the user ID. If the token is invalid or the user ID is not found in the token, it raises an HTTP exception with a 401 status code.\n\n- `backend/core/config.py`:\n  - `Settings`: This Python code defines a class named `Settings` that inherits from `BaseSettings`. The class contains several attributes including `database_url`, `secret_key`, `access_token_expire_minutes`, `refresh_token_expire_minutes`, `mode`, and `model_config`. The `__init__` method is used to initialize these attributes.\n  - `__init__`: This Python code defines an initialization method for a class that inherits from a parent class, passing any keyword arguments received to the parent class's initialization method.\n\n- `backend/main.py`:\n  - `root`: This Python code defines a function named `root` that, when called, returns a dictionary with a single key-value pair, where the key is \"status\" and the value is \"ok\".\n"}
