from fastapi import APIRouter, Depends, HTTPException, Body
from pydantic import BaseModel
from typing import Any

from backend.auth.utils import get_current_user

router = APIRouter()

class AskRequest(BaseModel):
    question: str
    project_id: int

class AskResponse(BaseModel):
    answer: str

@router.post("/ask", response_model=AskResponse)
def ask_user_question(
    data: AskRequest,
    user_id: int = Depends(get_current_user)
) -> Any:
    # TODO: Call LLM agent to generate GraphQL and execute it
    return {"answer": f"[MOCK] {user_id} asked: '{data.question}' for project {data.project_id}"}


@router.get("/project/{project_id}/summary")
def get_project_summary(project_id: int, user_id: int = Depends(get_current_user)):
    # TODO: Generate summary for the given project
    return {
        "project_id": project_id,
        "summary": "[MOCK] This is a project summary generated by LLM."
    }